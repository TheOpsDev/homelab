---
name: OpenTofu Comment PR
run-name: OpenTofu ${{ github.event.number }}
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited
    paths:
      - "opentofu/**"

env:
  tf_actions_working_dir: "."

jobs:
  determine-changed-dirs:
    runs-on: ubuntu-latest
    outputs:
      changed-dirs: ${{ steps.get-changed-dirs.outputs.changed-dirs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          sparse-paths: |
            opentofu
      - name: Get changed directories
        id: get-changed-dirs
        run: |
          echo "::set-output name=changed-dirs::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep '/' | cut -d '/' -f1 | sort -u | tr '\n' ',')"

  comment-pr:
    needs: determine-changed-dirs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        dir: ${{ fromJson(needs.determine-changed-dirs.outputs.changed-dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.0
      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true
      - name: OpenTofu Init
        id: init
        run: tofu init
      - name: OpenTofu Validate
        id: validate
        run: tofu validate
      - name: OpenTofu Plan
        id: plan
        run: tofu plan -no-color -concise
        continue-on-error: true
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, \
            Action: \`${{ github.event_name }}\`, \
            Working Directory: \`${{ matrix.dir }}\`, \
            Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

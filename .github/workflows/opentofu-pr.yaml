---
name: OpenTofu Comment PR
run-name: OpenTofu - PR Number ${{ github.event.number }}
on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
      - edited
      - closed
    paths:
      - "opentofu/**"

jobs:
  determine-changed-dirs:
    runs-on: ubuntu-latest
    outputs:
      changed-dirs: ${{ steps.get-modified-opentofu-dirs.outputs.changed-dirs }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Get Changed Files
        id: get-changed-files
        uses: tj-actions/changed-files@v45
        with:
          files: |
            opentofu/**
          files_ignore: |
            opentofu/tofu-modules/**
      - name: Identify Modified OpenTofu Directories
        id: get-modified-opentofu-dirs
        run: |
          echo "${{ steps.get-changed-files.outputs.all_changed_files }}" | tr ' ' '\n' | sed 's|/[^/]*$||' | sort -u | uniq | jq -R -s -c 'split("\n") | map(select(length > 0))' > modified_dirs.txt
          echo changed-dirs=$(cat modified_dirs.txt) >> $GITHUB_OUTPUT

  generate-tf-plan:
    needs: determine-changed-dirs
    runs-on: ubuntu-latest
    outputs:
      tf-plan-id: ${{ steps.upload-artifact.outputs.artifact_id }}
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_account_id: ${{ secrets.TF_VAR_cloudflare_account_id }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
      SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_pagerduty_token: ${{ secrets.TF_VAR_pagerduty_token }}
      TF_VAR_source_cidrs: ${{ secrets.TF_VAR_source_cidrs }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.determine-changed-dirs.outputs.changed-dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    permissions:
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.0
      - name: OpenTofu fmt
        id: fmt
        run: tofu fmt -check
        continue-on-error: true
      - name: OpenTofu Init
        id: init
        run: tofu init
      - name: OpenTofu Validate
        id: validate
        run: tofu validate -no-color
      - name: OpenTofu Plan
        id: plan
        run: |
          service_name=$(echo "${{ matrix.dir }}" | awk -F'/' '{print $2}')
          echo "service_name=${service_name}" >> "$GITHUB_OUTPUT"
          tofu plan -no-color -concise -out="tf-${service_name}.plan"
        continue-on-error: true
      - name: Upload TF Plan Artifact
        if: steps.plan.outcome == 'success'
        uses: actions/upload-artifact@v4
        with:
          name: tf-${{ steps.plan.outputs.service_name }}.plan
          path: ${{ matrix.dir }}/tf-${{ steps.plan.outputs.service_name }}.plan
          overwrite: true
          if-no-files-found: error
          retention-days: 1
      - uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        env:
          PLAN: "tofu\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('OpenTofu Format and Style')
            })

            // 2. Prepare format of the comment
            const output = `#### OpenTofu Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### OpenTofu Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### OpenTofu Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`golang\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### OpenTofu Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`golang\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, \
            Action: \`${{ github.event_name }}\`, \
            Working Directory: \`${{ matrix.dir }}\`, \
            Workflow: \`${{ github.workflow }}\`*`;

            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }

  apply-tf-plan:
    if: github.event.pull_request.merged == true
    needs: [determine-changed-dirs]
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
      TF_VAR_cloudflare_account_id: ${{ secrets.TF_VAR_cloudflare_account_id }}
      DIGITALOCEAN_TOKEN: ${{ secrets.DIGITALOCEAN_TOKEN }}
      SPACES_SECRET_ACCESS_KEY: ${{ secrets.SPACES_SECRET_ACCESS_KEY }}
      SPACES_ACCESS_KEY_ID: ${{ secrets.SPACES_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_pagerduty_token: ${{ secrets.TF_VAR_pagerduty_token }}
      TF_VAR_source_cidrs: ${{ secrets.TF_VAR_source_cidrs }}
    strategy:
      matrix:
        dir: ${{ fromJson(needs.determine-changed-dirs.outputs.changed-dirs) }}
    defaults:
      run:
        working-directory: ${{ matrix.dir }}
    permissions:
      actions: read
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.9.0
      - name: Get Service Name
        id: get-service-name
        run: |
          service_name=$(echo "${{ matrix.dir }}" | awk -F'/' '{print $2}')
          echo "service_name=${service_name}" >> "$GITHUB_OUTPUT"
      - name: download-tf-plan
        uses: dawidd6/action-download-artifact@v8
        with:
          workflow: opentofu-pr.yaml
          check_artifacts: true
          search_artifacts: true
          use_unzip: true
          name: tf-${{ steps.get-service-name.outputs.service_name }}.plan
          path: ${{ matrix.dir }}/
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: OpenTofu Init
        run: tofu init
      - name: OpenTofu Apply
        run: |
          tofu apply -no-color -auto-approve -concise tf-${{ steps.get-service-name.outputs.service_name }}.plan
